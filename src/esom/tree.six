import isArray from Array;

import keys from Object;
import defineProperty from Object;


class Tree {
    constructor(ast, options) {
        this.root = new Node( ast );
    }
    toAST() {
        return this.root.toAST();
    }
}

class Node {
    constructor( ast ) {
        defineProperty(this, "children", { value: [] });

        for( var key of keys(ast) ) {
            if( typeof ast[key] === "object" && key !== "range" ) {
                this.append(
                    this[key] = new ( isArray(ast[key]) ? NodeSet : Node )( ast[key] )
                );
            } else {
                this[key] = ast[key];
            }
        }
    }
    append( node ) {
        this.children.push(node);
    }
    iterator() {
        return {
            elements: keys(this).map( key => ({ key, value: this[key] }) ),
            index: 0,
            next() {
                if( this.index >= this.elements.length ) throw StopIteration;
                return this.elements[this.index++];
            }
        }
    }
    toAST() {
        var ast = {};

        for( var { key, value } of this ) {
            ast[key] = typeof value === "object" ? value.toAST() : value;
        }

        return ast;
    }
}

class NodeSet extends Array {
    constructor( items ) {
        this.length = 0;
        items.forEach( item => this.push(item) );
    }
    toAST() {
        return this.slice();
    }
}

export Tree;
